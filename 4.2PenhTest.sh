#!/bin/bash
#Version 4.2
#Not Stable

network_range=""
output_dir=""
scan_type=""
password_list="./def_pass.txt"
local_ip=""

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

display_intro() {
    titlex
}

titlex(){
    clear
    echo -e "\e[1;34m"
    cat << "EOF"
 _______  _______  _        _______  _______  _______ _________
(  ____ )(  ____ \( (    /|(  ____ \(  ____ \(  ____ \\__   __/
| (    )|| (    \/|  \  ( || (    \/| (    \/| (    \/   ) (   
| (____)|| (__    |   \ | || |      | (__    | (_____    | |   
|  _____)|  __)   | (\ \) || |      |  __)   (_____  )   | |   
| (      | (      | | \   || |      | (            ) |   | |   
| )      | (____/\| )  \  || (____/\| (____/\/\____) |   | |   
|/       (_______/|/    )_)(_______/(_______/\_______)   )_(   
EOF
}

infox() {
    echo -e "\e[0m"
    echo -e "\e[1;32m================================\e[0m"
    echo -e "\e[1;33m   Student ID: \e[1;37m$(db64 $eid)\e[0m"
    echo -e "\e[1;33m   Name: \e[1;37m$(db64 $en)\e[0m"
    echo -e "\e[1;32m================================\e[0m"
    echo
    echo -e "\e[1;36mWelcome to the Advanced Network Pentest Tool\e[0m"
    echo
    echo "- Enter the number corresponding to your choice"
    echo "- Press Enter to confirm your selection"
    echo "- Follow on-screen instructions for each option"
    echo
    sleep 1
}

get_local_ip() {
  local_ip=$(hostname -I | awk '{print $1}')
  default_gateway=$(ip route | awk '/default/ { print $3 }')
  broadcast_ip=$(ip a | awk '/inet .*brd/ {print $4}' | head -n1)
  echo "Local IP: $local_ip, Gateway: $default_gateway, Broadcast: $broadcast_ip"
}

initial_menu() {
  clear
  display_intro
  infox
  get_local_ip
  echo -e "\e[0m"
  echo "===== Welcome to Advanced Network Scanner ====="
  echo "1. Start a New IP Scan"
  echo "2. Search Existing Results"
  echo "3. Exit"
  echo "=============================================="
  echo "Enter your choice: "
  read initial_choice

  case $initial_choice in
    1)
      main_menu
      ;;
    2)
      list_and_search_results
      ;;
    3)
      echo "Exiting program."
      exit 0
      ;;
    *)
      echo "Invalid choice, please try again."
      initial_menu
      ;;
  esac
}

db64() {
  echo "$1" | base64 --decode
}

list_and_search_results() {
  echo "Available directories:"
  select result_dir in */; do
    if [ -n "$result_dir" ]; then
      search_results "$result_dir"
      break
    else
      echo "Invalid selection. Please try again."
    fi
  done
}

main_menu() {
  echo "===== Scan Mode Selection ====="
  echo "1. Basic Scan"
  echo "2. Full Scan"
  echo "3. Exit"
  echo "=============================="
  echo "Enter your choice: "
  read choice

  case $choice in
    1)
      scan_type="Basic"
      perform_scan
      ;;
    2)
      scan_type="Full"
      perform_scan
      ;;
    3)
      echo "Exiting program."
      exit 0
      ;;
    *)
      echo "Invalid choice, please try again."
      main_menu
      ;;
  esac
}

perform_scan() {
  get_user_input
  validate_input
  create_output_dir
  ask_for_custom_password_list
  network_scan
  log_results
  post_scan_options
}

get_user_input() {
  echo "Enter the network range or IP (e.g., 192.168.1.0/24 or 192.168.1.1):"
  read network_range

  echo "Enter the name for the output directory:"
  read output_dir
}

validate_input() {
  if [[ -z "$network_range" || -z "$output_dir" ]]; then
    echo "Invalid input. Please provide all required information."
    exit 1
  fi
}

create_output_dir() {
  if [ ! -d "$output_dir" ]; then
    mkdir -p "$output_dir"
  fi
}

ask_for_custom_password_list() {
  echo "Do you want to use a custom password list? (yes/no, default: no)"
  read use_custom_pw

  use_custom_pw=$(echo "$use_custom_pw" | tr '[:upper:]' '[:lower:]')

  if [[ -z "$use_custom_pw" || "$use_custom_pw" != "yes" ]]; then
    echo "Using default password list."
    return
  fi

  echo "Enter the full path to your custom password list (or just filename if it's in the same directory as the script):"
  read custom_list
  if [[ -f "$custom_list" ]]; then
    password_list="$custom_list"
    echo "Custom password list set to: $password_list"
  else
    echo "File not found. Using default password list."
  fi
}

en="VE9ORyBQYW5oYXZpc2FsCg=="
eid="UzM1Cg=="

network_scan() {
  local scan_options=""
  local port_count=100
  local discovery_options="-PS22,80,443 -PA80,443 -PU161 -PY -PE -PP -PM"

  get_port_count() {
    echo "Enter the number of top ports to scan (default is 100, press Enter to use default):"
    read user_port_count
    if [[ -n "$user_port_count" && "$user_port_count" =~ ^[0-9]+$ ]]; then
      port_count=$user_port_count
    fi
    echo "Using top $port_count ports for scanning."
  }

  if [[ $scan_type == "Basic" ]]; then
    get_port_count
    scan_options="-sV -sU --top-ports $port_count -T4"
  elif [[ $scan_type == "Full" ]]; then
    get_port_count
    scan_options="-sV -sU -A --top-ports $port_count --script=default,vuln -T4"
  fi

  echo "Scanning network range: $network_range"
  if ! command_exists nmap; then
    echo "Error: nmap is not installed. Please install nmap and try again."
    exit 1
  fi

  # Perform host discovery
  echo "Performing host discovery..."
  nmap -sn $discovery_options $network_range -oG - | awk '/Up$/{print $2}' > "$output_dir/up_hosts.txt"

  # If no hosts found, try more aggressive scanning
  if [ ! -s "$output_dir/up_hosts.txt" ]; then
    echo "No hosts detected. Trying more aggressive discovery..."
    nmap -Pn -F $network_range -oG - | awk '/open/{print $2}' > "$output_dir/up_hosts.txt"
  fi

  # Read the list of up hosts
  mapfile -t ips < "$output_dir/up_hosts.txt"
  echo "Hosts detected as 'Up': ${ips[@]}"

  for ip in "${ips[@]}"; do
    if [[ "$ip" == "$local_ip" || \
          "$ip" == "$default_gateway" || \
          "$ip" == "$broadcast_ip" || \
          " $additional_skip_ips " == *" $ip "* ]]; then
      echo "Skipping $ip (matches skip criteria)."
      continue
    fi
    echo "Starting ${scan_type} scan for IP: $ip"
    local ip_scan_file="$output_dir/$(echo $ip | tr '/' '_')_${scan_type}_scan.txt"
    
    nmap $scan_options $ip -oN "$ip_scan_file" -v
    
    local tcp_ports=$(awk '/^[0-9]+\/tcp.*open/ {print $1}' "$ip_scan_file" | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//')
    local udp_ports=$(awk '/^[0-9]+\/udp.*open/ {print $1}' "$ip_scan_file" | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//')
    
    if [ -n "$tcp_ports" ] || [ -n "$udp_ports" ]; then
      echo "Analyzing vulnerabilities for $ip using searchsploit..."
      local searchsploit_file="$output_dir/$(echo $ip | tr '/' '_')_searchsploit.txt"
      searchsploit_scan $ip_scan_file $searchsploit_file
    else
      echo "No open ports found for $ip. Skipping vulnerability analysis."
    fi
    
    check_weak_passwords $ip
  done
}

searchsploit_scan() {
  local nmap_file=$1
  local output_file=$2

  if ! command_exists searchsploit; then
    echo "Warning: searchsploit is not installed. Skipping vulnerability analysis."
    return
  fi

  echo "Analyzing vulnerabilities..." > "$output_file"

  local cves=$(grep -oP 'CVE-\d{4}-\d+' "$nmap_file" | sort -u)

  if [ -z "$cves" ]; then
    echo "No CVEs found in Nmap scan results." >> "$output_file"
    return
  fi

  echo "CVEs found:" >> "$output_file"
  echo "$cves" >> "$output_file"
  echo "" >> "$output_file"

  echo "Searchsploit results:" >> "$output_file"
  while IFS= read -r cve; do
    echo "Searching for $cve..." >> "$output_file"
    searchsploit "$cve" >> "$output_file" 2>&1
    echo "" >> "$output_file"
  done <<< "$cves"

  echo "Searching for potentially vulnerable services:" >> "$output_file"
  grep -E "([0-9]+/tcp|udp).*open" "$nmap_file" | while read -r line; do
    service=$(echo "$line" | awk '{print $3}')
    version=$(echo "$line" | awk '{print $4}')
    if [ ! -z "$version" ]; then
      echo "Searching for $service $version..." >> "$output_file"
      searchsploit "$service $version" >> "$output_file" 2>&1
      echo "" >> "$output_file"
    fi
  done

  echo "Vulnerability analysis complete. Results saved in $output_file"
}

#Function to support Check Weak Pass
extract_open_ports() {
  local ip=$1
  local ip_scan_file="$output_dir/$(echo $ip | tr '/' '_')_${scan_type}_scan.txt"
  if [[ -f "$ip_scan_file" ]]; then
    grep -E "^[0-9]+/(tcp|udp).*open" "$ip_scan_file" | awk '{print $1}' | cut -d'/' -f1
  else
    echo "Nmap scan file not found for $ip" >&2
  fi
}

check_weak_passwords() {
  local ip=$1
  local weak_passwords_file="$output_dir/weak_passwords_$(echo $ip | tr '/' '_').txt"
  echo "Starting password checks for $ip" > "$weak_passwords_file"
  local services=("ssh:22" "rdp:3389" "ftp:21" "telnet:23" "mysql:3306" "postgresql:5432" "mssql:1433")

  if ! command_exists hydra; then
    echo "Warning: hydra is not installed. Skipping weak password checks."
    return
  fi

  # Get the list of open ports
  local open_ports=$(extract_open_ports "$ip")
  
  if [[ -z "$open_ports" ]]; then
    echo "No open ports found for $ip. Skipping weak password checks." >> "$weak_passwords_file"
    return
  fi

  for service in "${services[@]}"; do
    local service_name=${service%%:*}
    local default_port=${service##*:}
    
    # Check if the default port for this service is open
    if echo "$open_ports" | grep -q "\b$default_port\b"; then
      local output_file="$output_dir/hydra_${service_name}_$(echo $ip | tr '/' '_').txt"
      echo "Testing $service_name on $ip port $default_port..."
      timeout 300 hydra -L userlist.txt -P "$password_list" -s $default_port $service_name://$ip -o "$output_file" -t 4 -f -vV
      if [[ $? -eq 124 ]]; then
        echo "Hydra timed out after 5 minutes for $service_name on $ip" >> "$weak_passwords_file"
      elif grep -q "login:" "$output_file"; then
        echo "$service_name on port $default_port - Weak password found" >> "$weak_passwords_file"
        grep "login:" "$output_file" >> "$weak_passwords_file"
      else
        echo "$service_name on port $default_port - No weak passwords found" >> "$weak_passwords_file"
      fi
    else
      echo "$service_name on port $default_port - Port not open, skipping" >> "$weak_passwords_file"
    fi
  done
}

log_results() {
  echo "Logging results..."
  local summary_file="$output_dir/summary.txt"

  > "$summary_file"

  echo "===== Network Scan Summary =====" >> "$summary_file"
  echo "Scan performed on $(date)" >> "$summary_file"
  echo "" >> "$summary_file"

  echo "List of UP IPs:" >> "$summary_file"
  for ip_file in "$output_dir"/*_scan.txt; do
    ip=$(basename "$ip_file" | cut -d'_' -f1 | tr '_' '/')
    echo "- $ip" >> "$summary_file"
  done
  echo "" >> "$summary_file"

  echo "Detailed results for each IP:" >> "$summary_file"
  for ip_file in "$output_dir"/*_scan.txt; do
    ip=$(basename "$ip_file" | cut -d'_' -f1 | tr '_' '/')
    echo "IP: $ip" >> "$summary_file"
    echo "Open ports and services:" >> "$summary_file"
    awk '/^[0-9]+\/(tcp|udp).*open/ {print "  - "$1" "$3" "$4" "$5" "$6}' "$ip_file" >> "$summary_file"
    echo "" >> "$summary_file"

    echo "Vulnerabilities:" >> "$summary_file"
    searchsploit_file="$output_dir/$(echo $ip | tr '/' '_')_searchsploit.txt"
    if [ -f "$searchsploit_file" ]; then
      grep -v "Exploits:" "$searchsploit_file" | grep -v "Shellcodes:" >> "$summary_file"
    else
      echo "No vulnerabilities found or vulnerability scan was not performed." >> "$summary_file"
    fi

    weak_pass_file="$output_dir/weak_passwords_$(echo $ip | tr '/' '_').txt"
    if [ -f "$weak_pass_file" ]; then
      echo "Weak Password Check Results:" >> "$summary_file"
      grep -v "Starting password checks" "$weak_pass_file" >> "$summary_file"
    else
      echo "No weak password check results available." >> "$summary_file"
    fi
    echo "----------------------------------------" >> "$summary_file"
  done

  echo "" >> "$summary_file"
  echo "===== End of Summary =====" >> "$summary_file"

  if command_exists zip; then
    zip -r "$output_dir/results.zip" "$output_dir"
  else
    echo "Warning: zip is not installed. Skipping creation of results.zip"
  fi

  cat "$summary_file"
}

post_scan_options() {
  echo "Select an option:"
  echo "1. Perform another scan"
  echo "2. Search the results of the current scan"
  echo "3. Search results from a different directory"
  echo "4. Exit"
  read post_choice

  case $post_choice in
    1)
      perform_scan
      ;;
    2)
      search_results "$output_dir"
      ;;
    3)
      echo "Enter the directory to search:"
      read other_dir
      search_results "$other_dir"
      ;;
    4)
      echo "Exiting program."
      exit 0
      ;;
    *)
      echo "Invalid choice, please try again."
      post_scan_options
      ;;
  esac
}

search_results() {
  local search_dir=$1

  if [ ! -d "$search_dir" ]; then
    echo "Error: The specified directory does not exist."
    return
  fi

  while true; do
    echo "Enter search term (or type 'exit' to return to the main menu):"
    read search_term

    if [[ "$search_term" == "exit" ]]; then
      break
    fi

    echo "Searching for '$search_term' in $search_dir..."
    
    grep -r -i --color=always "$search_term" "$search_dir"/*.txt

    if [ $? -ne 0 ]; then
      echo "No results found for '$search_term'"
    fi

    echo "Press any key to continue searching or type 'exit' to return to the main menu..."
    read -n 1 option
    if [[ "$option" == "exit" ]]; then
      break
    fi
  done
  initial_menu
}

initial_menu
